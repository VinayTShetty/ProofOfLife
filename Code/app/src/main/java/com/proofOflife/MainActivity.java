package com.proofOflife;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;

import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        String securityKey="39551712138898479008492112d41129";
        String fingerPrintData="0310000103036a0c00012001959529298701070007005500000000000cfffffffffeeaaaaaaaaa65555555554400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c3592e2d923ae4cf92129e27f60a1267e3b13e4992b97e2f9282e641a2f18ccd83a164d994eaf249f341b2359399ba3f9a78a7a26384200232a8729725299599869a666000000ac40a9b4960049510b71b105add309720c16e4050b23022e940937480e5c93b27d6b07fad41b2c0c0e10121b460950da0b4c0caeaa1cad1867bb38e7a31c6181ce08590fb3d834abfc51ac28830057e0067665b84d050e16091d6103354302db7a03311a072b570d5ba6ab1505370c0218a2032068027dc8062c47ae52200ca364a0b30c0c1707186303433b017026b2d845053981087cc10a1d0e16500d36c80ab43805d871034e71b331660461c805b708390b01752f039956b0396d0068da";
        String timeStamp="6024F3F4";
        System.out.println("SHA_KEY Total Data Detials");
        System.out.println("SHA_KEY SECURITY_KEY_LENGTH= "+securityKey.length());
        System.out.println("SHA_KEY FINGER_PRINT_LENGTH= "+fingerPrintData.length());
        System.out.println("SHA_KEY TIME_STAMP= "+timeStamp.length());
        String totalData=securityKey+fingerPrintData+timeStamp;
        System.out.println("SHA_KEY TOTAL DATA LENGTH= "+totalData.length());
        try {
            System.out.println("SHA_KEY Hex Input "+toHexString(getSHA(totalData)));
            System.out.println("SHA_KEY Text input "+toHexString(getSHAUsingText(totalData)));

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    public static byte[] getSHA(String input) throws NoSuchAlgorithmException
    {
        // Static getInstance method is called with hashing SHA
        MessageDigest md = MessageDigest.getInstance("SHA-256");

        // digest() method called
        // to calculate message digest of an input
        // and return array of byte
        return md.digest(hexStringToByteArray(input));
    }

    public static byte[] getSHAUsingText(String input) throws NoSuchAlgorithmException
    {
        // Static getInstance method is called with hashing SHA
        MessageDigest md = MessageDigest.getInstance("SHA-256");

        // digest() method called
        // to calculate message digest of an input
        // and return array of byte
        return md.digest(input.getBytes(StandardCharsets.UTF_8));
    }

    public static String toHexString(byte[] hash)
    {
        // Convert byte array into signum representation
        BigInteger number = new BigInteger(1, hash);

        // Convert message digest into hex value
        StringBuilder hexString = new StringBuilder(number.toString(16));

        // Pad with leading zeros
        while (hexString.length() < 32)
        {
            hexString.insert(0, '0');
        }

        return hexString.toString();
    }

    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

}